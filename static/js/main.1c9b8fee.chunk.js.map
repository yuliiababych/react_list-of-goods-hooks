{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","alphabet","localeCompare","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,+BAAAA,E,yBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,WAETI,EAAa,YAAOD,GAiBxB,OAfIL,IACFM,EAAgBA,EAAcC,MAAK,SAACC,EAAOC,GACzC,OAAQT,GACN,KAAKJ,EAASc,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,OAKXV,EACKI,EAAcO,UAGhBP,EAMcQ,CAAiBjB,EAAiB,CACrDG,YAAWE,eAUb,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,WAAYjB,IAAcJ,EAASc,WACvCQ,QAAS,WACPjB,EAAaL,EAASc,WAL1B,iCAWA,wBACEM,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,WAAYjB,IAAcJ,EAASgB,SACvCM,QAAS,WACPjB,EAAaL,EAASgB,SAL1B,4BAWA,wBACEI,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,YAAaf,IACjBgB,QAAS,kBAAMf,GAAeD,IAJhC,sBASEF,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAWE,IAAG,4BACZ,CAAE,cAAejB,GAAaE,KAChCgB,QA9CW,YACflB,GAAaE,KACfD,EAAa,IACbE,GAAc,KAuCV,sBAWJ,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCpHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1c9b8fee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  alphabet = 'Sort alphabetically',\n  length = 'Sort by length',\n}\n\ninterface SortParams {\n  sortField: string,\n  isReversed: boolean,\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReversed }: SortParams,\n) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods = preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField, isReversed,\n  });\n\n  const resetSorting = () => {\n    if (sortField || isReversed) {\n      setSortField('');\n      setIsReversed(false);\n    }\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SortType.alphabet })}\n          onClick={() => {\n            setSortField(SortType.alphabet);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SortType.length })}\n          onClick={() => {\n            setSortField(SortType.length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': !isReversed })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className={cn('button is-danger is-light',\n              { 'is-hidden': !(sortField || isReversed) })}\n            onClick={resetSorting}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}